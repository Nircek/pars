#!/usr/bin/env python3
import math
import sys
import subprocess
import re
# requires par (https://en.wikipedia.org/wiki/Par_(command)) with multi-byte character support in PATH

width = int(sys.argv[1]) if len(sys.argv) > 1 else 80
content = (open(sys.argv[2], 'r') if len(sys.argv) > 2 else sys.stdin).read()

def prepare(content):
    'sieroty'
    content = re.sub(r'[\t \u00a0]+', ' ', content)
    def trun(matchobj):
        if len(matchobj.group(0)) > 1:
            return matchobj.group(0)
        return ' '
    content = re.sub(r'\n+', trun, content)
    content = re.sub(r'(?<=\s)([("]*(\d+|i|[\S\w]{1,2}|lub|ale|czy|nad|pod|bez|nie|tak|albo|wiÄ™c|lecz|przez|niech|tylko)\W*)[ \t]+', '\\1\N{Nbsp}', content)
    def xd(matchobj):
        return matchobj.group(1) + len(matchobj.group(2))*'\N{Nbsp}'
    content = re.sub(r'(?<=\s)(\S)(\s+)', xd, content)
    return content

content = prepare(content)
maximumLength, maximumWord = max([(len(w), w) for w in re.split(r'[ \t\n]+', content)])

def prejustify(width, content):
    try:
        return subprocess.run(["par", f"{width}j"], input=content.encode(), capture_output=True, check=True).stdout.decode()
    except subprocess.CalledProcessError:
        return None

def getScore(width):
    out = prejustify(width, content)
    if out is None:
        return math.inf
    score = 0.0
    out = out.split('\n')
    for line in out:
        if len(line) != width:
            continue
        extra, words = 0, 0
        for word in line.replace('\N{Nbsp}', ' ').split(' '):
            if word:
                words += 1
            else:
                extra += 1
        score += (extra/words)**10
    return score/len(out)

score, bestWidth = min([(getScore(width+w),width+w) for w in range(-20, 1)])

assert score != math.inf, f"len(`{maximumWord}`) = {maximumLength} can't be justified"

# print(content.replace('\N{Nbsp}', '\N{BLACK SQUARE}'))
preout = prejustify(bestWidth, content)
# print(preout.replace('\N{Nbsp}', '\N{BLACK SQUARE}'))
out = []

for line in preout.split('\n'):
    trimmed = re.sub(r'[ \u00a0]+', ' ', line)
    if len(line) != bestWidth:
        out += [trimmed]
        continue
    out += [prejustify(bestWidth, trimmed+'\n'+'a'*bestWidth).split('\n')[0]]

print('\n'.join(out))
print(bestWidth, score, file=sys.stderr)
